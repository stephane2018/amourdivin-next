pipeline {
    agent any
    stages {
        stage('Checkout Code') {
            steps {
                git url: 'git@github.com:stephane2018/amourdivinclient.git', branch: 'deploy', credentialsId: 'ssh-jenkins-credentails'
            }
        }
        stage('Build Docker Image') {
            steps {
                sh 'docker-compose build app'
            }
        }
        stage('Tag Docker Image') {
            steps {
                script {
                    def version = env.BUILD_ID
                    sh "docker tag pipeline-amourdivin_app:latest pipeline-amourdivin_app:${version}"
                }
            }
        }
        stage('Clean Up (Optional)') {
            steps {
                sh '''
                # Get all containers in long format
                container_list=$(docker ps -l)
                
                # Filter the list based on image name and sort by created time (descending)
                last_container_id=$(echo "$container_list" | grep "pipeline-amourdivin_app" | tail -n 1 | awk '{print $1}')
               
  
                docker rm -f $(docker ps -a -q --filter="ancestor=$last_container_id") 2>&- || echo "Found no containers for that image"
                docker rmi $last_container_id
                echo "Image deleted successfully"
                '''
            }
            
        } 
        stage('Deploy and execute') {
            steps {
                sh 'docker-compose up -d'
                sh 'docker run -d 3000:3000 pipeline-amourdivin_app'
            }
        }
        
        stage('remove unysed Images ') {
            steps {
                sh 'docker image prune'
            }
        }
    }
}
